# install.packages("readxl") you'll have to install the package first before loading it using the library() function
library(readxl)
library(here)
library(dplyr)
library(base) # for the gsub function
library(maditr) # for the dcast function # install.packages("maditr")
library(ggplot2)
library(langcog)
library(ggpubr)
# install.packages("devtools")
# devtools::install_github("langcog/langcog")
library(lme4)
library(forcats)
library(nlme)
d_raw <- read.csv(here("combined_data.csv"))
head(d_raw)
here
here()
d_raw <- read.csv(here("combined_data.csv"))
# install.packages("readxl") you'll have to install the package first before loading it using the library() function
library(readxl)
library(here)
library(dplyr)
library(base) # for the gsub function
library(maditr) # for the dcast function # install.packages("maditr")
library(ggplot2)
library(langcog)
library(ggpubr)
# install.packages("devtools")
# devtools::install_github("langcog/langcog")
library(lme4)
library(forcats)
library(nlme)
here()
d_raw <- read.csv(here("data_code/combined_data.csv"))
head(d_raw)
d <- d_raw %>%
filter(sub > 12) %>% #use the last version of the pilot
mutate(valence=fct_relevel(valence, "positive", "negative"),
#category=fct_relevel(category, "excitement", "affection", "craving"),
ave_rating = (HMM + BEJ)/2,
Condition = case_when(condition == "baby" ~ "Infant-Directed",
condition == "adult" ~ "Adult-Directed"),
Valence = case_when(valence == "positive" ~ "Positive",
valence == "negative" ~ "Negative"),
Category = case_when(category == "excitement" ~ "Excitement",
category == "affection" ~ "Affection",
category == "craving" ~ "Craving",
category == "disgust" ~ "Disgust",
category == "fear" ~ "Fear",
category == "sadness" ~ "Sadness"),
Category=factor(Category, levels = c("Excitement", "Affection", "Craving", "Sadness", "Fear", "Disgust")))
ms <- d %>%
group_by(Valence, Condition) %>%
multi_boot_standard(col = "ave_rating")
fig <- ggplot(ms, aes(x=Condition, y = mean, group=Valence, color=Valence)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin=ci_lower, ymax=ci_upper), width=.2,
position=position_dodge(0)) +
ylim(-2.5, 2.5) +
theme_bw() +
#ggtitle("Valence Rating by Condition")+
#theme(plot.title = element_text(hjust = 0.5))+
ylab("Valence of Facial Expression")
fig
ms_cat <- d %>%
group_by(Category, Condition) %>%
multi_boot_standard(col = "ave_rating")
fig_cat <- ggplot(ms_cat, aes(x=Condition, y = mean, fill=Category)) +
geom_bar(stat="identity", color="black", position=position_dodge())+
geom_errorbar(aes(ymin=ci_lower, ymax=ci_upper), width=.2,
position=position_dodge(.9)) +
ylim(-2.5, 2.5) +
theme_bw() +
#ggtitle("Pilot 3 (n = 26): \n Baby vs. Adult")+
#theme(plot.title = element_text(hjust = 0.5))+
ylab("Valence of Facial Expression")
fig_cat
model <- lme(ave_rating~Valence*Condition, random = ~Valence*Condition|sub, data = d)
model <- lme(ave_rating~Valence*Condition, random = ~Valence*Condition|sub, data = d)
summary(model)
model_positive <- lme(ave_rating ~ Condition, random = ~Condition|sub, data=d[d$Valence=="Positive",])
summary(model_positive)
model_negative <- lme(ave_rating ~ Condition, random = ~Condition|sub, data=d[d$Valence=="Negative",])
summary(model_negative)
model_adult <- lme(ave_rating ~ Valence, random = ~Valence|sub, data=d[d$Condition=="Adult-Directed",])
summary(model_adult)
model_infant <- lme(ave_rating ~ Valence, random = ~Valence|sub, data=d[d$Condition=="Infant-Directed",])
summary(model_infant)
# positive categories
d_positive <- d[d$Valence=="Positive",]
model_category_positive_infant <- lme(ave_rating ~ Category, random = ~Category|sub, data=d_positive[d_positive$Condition=="Infant-Directed",])
summary(model_category_positive_infant)
model_category_positive_infant <- lme(ave_rating ~ relevel(Category, ref=2), random = ~Category|sub, data=d_positive[d_positive$Condition=="Infant-Directed",])
summary(model_category_positive_infant)
model_category_positive_adult <- lme(ave_rating ~ Category, random = ~Category|sub, data=d_positive[d_positive$Condition=="Adult-Directed",])
summary(model_category_positive_adult)
model_category_positive_adult <- lme(ave_rating ~ relevel(Category, ref=2), random = ~Category|sub, data=d_positive[d_positive$Condition=="Adult-Directed",])
summary(model_category_positive_adult)
# negative categories
d_negative <- d[d$Valence=="Negative",]
model_category_negative_infant <- lme(ave_rating ~ Category, random = ~Category|sub, data=d_negative[d_negative$Condition=="Infant-Directed",])
summary(model_category_negative_infant)
model_category_negative_infant <- lme(ave_rating ~ relevel(Category, ref=2), random = ~Category|sub, data=d_negative[d_negative$Condition=="Infant-Directed",])
summary(model_category_negative_infant)
model_category_negative_adult <- lme(ave_rating ~ Category, random = ~Category|sub, data=d_negative[d_negative$Condition=="Adult-Directed",])
summary(model_category_negative_adult)
model_category_negative_adult <- lme(ave_rating ~ relevel(Category, ref=2), random = ~Category|sub, data=d_negative[d_negative$Condition=="Adult-Directed",])
summary(model_category_negative_adult)
# install.packages("readxl") you'll have to install the package first before loading it using the library() function
library(readxl)
library(here)
library(dplyr)
library(base) # for the gsub function
library(maditr) # for the dcast function # install.packages("maditr")
library(ggplot2)
library(langcog)
library(ggpubr)
# install.packages("devtools")
# devtools::install_github("langcog/langcog")
library(lme4)
library(forcats)
library(nlme)
library(stringr)
library(tidyr)
if (!require("stringr")) install.packages("stringr")
library(stringr)
library(data.table)
word_data <- read.csv("word_data.csv")
condition_data <- read.csv("combined_data.csv")
data <- merge(condition_data, word_data, by=c("video_name", "picture_num"))
d <- data %>%
filter(sub > 12) %>% #use the last version of the pilot
mutate(valence=fct_relevel(valence, "positive", "negative"),
#category=fct_relevel(category, "excitement", "affection", "craving"),
ave_rating = (HMM + BEJ)/2,
Condition = case_when(condition == "baby" ~ "Infant-Directed",
condition == "adult" ~ "Adult-Directed"),
Valence = case_when(valence == "positive" ~ "Positive",
valence == "negative" ~ "Negative"),
Category = case_when(category == "excitement" ~ "Excitement",
category == "affection" ~ "Affection",
category == "craving" ~ "Craving",
category == "disgust" ~ "Disgust",
category == "fear" ~ "Fear",
category == "sadness" ~ "Sadness"),
Category=factor(Category, levels = c("Excitement", "Affection", "Craving", "Sadness", "Fear", "Disgust"))) %>%
select(video_name, picture_num, sub, age, Valence, Category, Condition, ave_rating, emoword_HC, emoword_LIWC)
d <- data %>%
filter(sub > 12) %>% #use the last version of the pilot
mutate(valence=fct_relevel(valence, "positive", "negative"),
#category=fct_relevel(category, "excitement", "affection", "craving"),
ave_rating = (HMM + BEJ)/2,
Condition = case_when(condition == "baby" ~ "Infant-Directed",
condition == "adult" ~ "Adult-Directed"),
Valence = case_when(valence == "positive" ~ "Positive",
valence == "negative" ~ "Negative"),
Category = case_when(category == "excitement" ~ "Excitement",
category == "affection" ~ "Affection",
category == "craving" ~ "Craving",
category == "disgust" ~ "Disgust",
category == "fear" ~ "Fear",
category == "sadness" ~ "Sadness"),
Category=factor(Category, levels = c("Excitement", "Affection", "Craving", "Sadness", "Fear", "Disgust"))) %>%
select(video_name, picture_num, sub, age, Valence, Category, Condition, ave_rating, emoword_LIWC)
d_new <- d %>%
mutate(emoword_LIWC = gsub("yummy,", "", emoword_LIWC),
emoword_LIWC = gsub("yum,", "", emoword_LIWC),
emoword_LIWC = gsub("yummy", "", emoword_LIWC),
emoword_LIWC = gsub("yum", "", emoword_LIWC),
emoword_LIWC = gsub(" ", "", emoword_LIWC)) %>%
gather("coding", "word", emoword_LIWC, factor_key=T) %>%
filter(coding=="emoword_LIWC") %>%
#filter(word!="") %>%
group_by(sub, coding, Condition) %>%
summarise(all_words = paste(word, collapse = ","),
condition_n = n()) %>%
mutate(total_n = lengths(lapply(strsplit(all_words, ","), function(x){x[!x ==""]})),
unique_words =
vapply(lapply(strsplit(all_words, ","), unique), paste, character(1L), collapse = ","),
unique_n = lengths(lapply(strsplit(unique_words, ","), function(x){x[!x ==""]}))) %>%
gather("kind", "number", total_n, unique_n, factor_key=T)
ms <- d_new %>%
group_by(Condition, kind) %>%
multi_boot_standard(col = "number")
fig <- ggplot(ms, aes(x=Condition, y = mean)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin=ci_lower, ymax=ci_upper), width=.2,
position=position_dodge(0)) +
ylim(0, 15) +
theme_bw() +
#ggtitle("Valence Rating by Condition")+
#theme(plot.title = element_text(hjust = 0.5))+
ylab("Number of Words") +
facet_wrap(vars(kind))
fig
d_new_wide <- spread(d_new, kind, number)
#total_n
t.test(total_n ~ Condition, data=d_new_wide, paired=TRUE)
mean(d_new_wide[d_new_wide$Condition=="Infant-Directed",]$total_n)
mean(d_new_wide[d_new_wide$Condition=="Adult-Directed",]$total_n)
#unique_n
t.test(number ~ Condition, data=d_new[d_new$kind=="unique_n",], paired=TRUE)
mean(d_new_wide[d_new_wide$Condition=="Infant-Directed",]$unique_n)
mean(d_new_wide[d_new_wide$Condition=="Adult-Directed",]$unique_n)
